'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class dsReinforcingAbility
    Inherits DataSet
    
    Private tableJobRate As JobRateDataTable
    
    Private tableProductType As ProductTypeDataTable
    
    Private tableCompany As CompanyDataTable
    
    Private tableContractor As ContractorDataTable
    
    Private tableCuttingSheet As CuttingSheetDataTable
    
    Private tableJob As JobDataTable
    
    Private tableSchedItem As SchedItemDataTable
    
    Private tableCutItem As CutItemDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("JobRate")) Is Nothing) Then
                Me.Tables.Add(New JobRateDataTable(ds.Tables("JobRate")))
            End If
            If (Not (ds.Tables("ProductType")) Is Nothing) Then
                Me.Tables.Add(New ProductTypeDataTable(ds.Tables("ProductType")))
            End If
            If (Not (ds.Tables("Company")) Is Nothing) Then
                Me.Tables.Add(New CompanyDataTable(ds.Tables("Company")))
            End If
            If (Not (ds.Tables("Contractor")) Is Nothing) Then
                Me.Tables.Add(New ContractorDataTable(ds.Tables("Contractor")))
            End If
            If (Not (ds.Tables("CuttingSheet")) Is Nothing) Then
                Me.Tables.Add(New CuttingSheetDataTable(ds.Tables("CuttingSheet")))
            End If
            If (Not (ds.Tables("Job")) Is Nothing) Then
                Me.Tables.Add(New JobDataTable(ds.Tables("Job")))
            End If
            If (Not (ds.Tables("SchedItem")) Is Nothing) Then
                Me.Tables.Add(New SchedItemDataTable(ds.Tables("SchedItem")))
            End If
            If (Not (ds.Tables("CutItem")) Is Nothing) Then
                Me.Tables.Add(New CutItemDataTable(ds.Tables("CutItem")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property JobRate As JobRateDataTable
        Get
            Return Me.tableJobRate
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ProductType As ProductTypeDataTable
        Get
            Return Me.tableProductType
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Company As CompanyDataTable
        Get
            Return Me.tableCompany
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Contractor As ContractorDataTable
        Get
            Return Me.tableContractor
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CuttingSheet As CuttingSheetDataTable
        Get
            Return Me.tableCuttingSheet
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Job As JobDataTable
        Get
            Return Me.tableJob
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SchedItem As SchedItemDataTable
        Get
            Return Me.tableSchedItem
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CutItem As CutItemDataTable
        Get
            Return Me.tableCutItem
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As dsReinforcingAbility = CType(MyBase.Clone,dsReinforcingAbility)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("JobRate")) Is Nothing) Then
            Me.Tables.Add(New JobRateDataTable(ds.Tables("JobRate")))
        End If
        If (Not (ds.Tables("ProductType")) Is Nothing) Then
            Me.Tables.Add(New ProductTypeDataTable(ds.Tables("ProductType")))
        End If
        If (Not (ds.Tables("Company")) Is Nothing) Then
            Me.Tables.Add(New CompanyDataTable(ds.Tables("Company")))
        End If
        If (Not (ds.Tables("Contractor")) Is Nothing) Then
            Me.Tables.Add(New ContractorDataTable(ds.Tables("Contractor")))
        End If
        If (Not (ds.Tables("CuttingSheet")) Is Nothing) Then
            Me.Tables.Add(New CuttingSheetDataTable(ds.Tables("CuttingSheet")))
        End If
        If (Not (ds.Tables("Job")) Is Nothing) Then
            Me.Tables.Add(New JobDataTable(ds.Tables("Job")))
        End If
        If (Not (ds.Tables("SchedItem")) Is Nothing) Then
            Me.Tables.Add(New SchedItemDataTable(ds.Tables("SchedItem")))
        End If
        If (Not (ds.Tables("CutItem")) Is Nothing) Then
            Me.Tables.Add(New CutItemDataTable(ds.Tables("CutItem")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableJobRate = CType(Me.Tables("JobRate"),JobRateDataTable)
        If (Not (Me.tableJobRate) Is Nothing) Then
            Me.tableJobRate.InitVars
        End If
        Me.tableProductType = CType(Me.Tables("ProductType"),ProductTypeDataTable)
        If (Not (Me.tableProductType) Is Nothing) Then
            Me.tableProductType.InitVars
        End If
        Me.tableCompany = CType(Me.Tables("Company"),CompanyDataTable)
        If (Not (Me.tableCompany) Is Nothing) Then
            Me.tableCompany.InitVars
        End If
        Me.tableContractor = CType(Me.Tables("Contractor"),ContractorDataTable)
        If (Not (Me.tableContractor) Is Nothing) Then
            Me.tableContractor.InitVars
        End If
        Me.tableCuttingSheet = CType(Me.Tables("CuttingSheet"),CuttingSheetDataTable)
        If (Not (Me.tableCuttingSheet) Is Nothing) Then
            Me.tableCuttingSheet.InitVars
        End If
        Me.tableJob = CType(Me.Tables("Job"),JobDataTable)
        If (Not (Me.tableJob) Is Nothing) Then
            Me.tableJob.InitVars
        End If
        Me.tableSchedItem = CType(Me.Tables("SchedItem"),SchedItemDataTable)
        If (Not (Me.tableSchedItem) Is Nothing) Then
            Me.tableSchedItem.InitVars
        End If
        Me.tableCutItem = CType(Me.Tables("CutItem"),CutItemDataTable)
        If (Not (Me.tableCutItem) Is Nothing) Then
            Me.tableCutItem.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "dsReinforcingAbility"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/dsReinforcingAbility.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-ZA")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableJobRate = New JobRateDataTable
        Me.Tables.Add(Me.tableJobRate)
        Me.tableProductType = New ProductTypeDataTable
        Me.Tables.Add(Me.tableProductType)
        Me.tableCompany = New CompanyDataTable
        Me.Tables.Add(Me.tableCompany)
        Me.tableContractor = New ContractorDataTable
        Me.Tables.Add(Me.tableContractor)
        Me.tableCuttingSheet = New CuttingSheetDataTable
        Me.Tables.Add(Me.tableCuttingSheet)
        Me.tableJob = New JobDataTable
        Me.Tables.Add(Me.tableJob)
        Me.tableSchedItem = New SchedItemDataTable
        Me.Tables.Add(Me.tableSchedItem)
        Me.tableCutItem = New CutItemDataTable
        Me.Tables.Add(Me.tableCutItem)
        Me.InitExpressions
    End Sub
    
    Private Function ShouldSerializeJobRate() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeProductType() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCompany() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeContractor() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCuttingSheet() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeJob() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSchedItem() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCutItem() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Private Sub InitExpressions()
        Me.tableCompany._No_NameColumn.Expression = "'[' + CompanyNo + ']' + '  ' + CompanyName"
        Me.tableContractor._No_NameColumn.Expression = "'[' + ContractorNo + ']' + '  ' + ContractorName"
        Me.tableJob._No_NameColumn.Expression = "'[' + JobNo + ']' + '  ' + JobName"
    End Sub
    
    Public Delegate Sub JobRateRowChangeEventHandler(ByVal sender As Object, ByVal e As JobRateRowChangeEvent)
    
    Public Delegate Sub ProductTypeRowChangeEventHandler(ByVal sender As Object, ByVal e As ProductTypeRowChangeEvent)
    
    Public Delegate Sub CompanyRowChangeEventHandler(ByVal sender As Object, ByVal e As CompanyRowChangeEvent)
    
    Public Delegate Sub ContractorRowChangeEventHandler(ByVal sender As Object, ByVal e As ContractorRowChangeEvent)
    
    Public Delegate Sub CuttingSheetRowChangeEventHandler(ByVal sender As Object, ByVal e As CuttingSheetRowChangeEvent)
    
    Public Delegate Sub JobRowChangeEventHandler(ByVal sender As Object, ByVal e As JobRowChangeEvent)
    
    Public Delegate Sub SchedItemRowChangeEventHandler(ByVal sender As Object, ByVal e As SchedItemRowChangeEvent)
    
    Public Delegate Sub CutItemRowChangeEventHandler(ByVal sender As Object, ByVal e As CutItemRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class JobRateDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnJobNo As DataColumn
        
        Private columnRate As DataColumn
        
        Private columnTypeCode As DataColumn
        
        Friend Sub New()
            MyBase.New("JobRate")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property JobNoColumn As DataColumn
            Get
                Return Me.columnJobNo
            End Get
        End Property
        
        Friend ReadOnly Property RateColumn As DataColumn
            Get
                Return Me.columnRate
            End Get
        End Property
        
        Friend ReadOnly Property TypeCodeColumn As DataColumn
            Get
                Return Me.columnTypeCode
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As JobRateRow
            Get
                Return CType(Me.Rows(index),JobRateRow)
            End Get
        End Property
        
        Public Event JobRateRowChanged As JobRateRowChangeEventHandler
        
        Public Event JobRateRowChanging As JobRateRowChangeEventHandler
        
        Public Event JobRateRowDeleted As JobRateRowChangeEventHandler
        
        Public Event JobRateRowDeleting As JobRateRowChangeEventHandler
        
        Public Overloads Sub AddJobRateRow(ByVal row As JobRateRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddJobRateRow(ByVal JobNo As String, ByVal Rate As Decimal, ByVal TypeCode As String) As JobRateRow
            Dim rowJobRateRow As JobRateRow = CType(Me.NewRow,JobRateRow)
            rowJobRateRow.ItemArray = New Object() {JobNo, Rate, TypeCode}
            Me.Rows.Add(rowJobRateRow)
            Return rowJobRateRow
        End Function
        
        Public Function FindByJobNoTypeCode(ByVal JobNo As String, ByVal TypeCode As String) As JobRateRow
            Return CType(Me.Rows.Find(New Object() {JobNo, TypeCode}),JobRateRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As JobRateDataTable = CType(MyBase.Clone,JobRateDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New JobRateDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnJobNo = Me.Columns("JobNo")
            Me.columnRate = Me.Columns("Rate")
            Me.columnTypeCode = Me.Columns("TypeCode")
        End Sub
        
        Private Sub InitClass()
            Me.columnJobNo = New DataColumn("JobNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnJobNo)
            Me.columnRate = New DataColumn("Rate", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRate)
            Me.columnTypeCode = New DataColumn("TypeCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTypeCode)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnJobNo, Me.columnTypeCode}, true))
            Me.columnJobNo.AllowDBNull = false
            Me.columnTypeCode.AllowDBNull = false
        End Sub
        
        Public Function NewJobRateRow() As JobRateRow
            Return CType(Me.NewRow,JobRateRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New JobRateRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(JobRateRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.JobRateRowChangedEvent) Is Nothing) Then
                RaiseEvent JobRateRowChanged(Me, New JobRateRowChangeEvent(CType(e.Row,JobRateRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.JobRateRowChangingEvent) Is Nothing) Then
                RaiseEvent JobRateRowChanging(Me, New JobRateRowChangeEvent(CType(e.Row,JobRateRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.JobRateRowDeletedEvent) Is Nothing) Then
                RaiseEvent JobRateRowDeleted(Me, New JobRateRowChangeEvent(CType(e.Row,JobRateRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.JobRateRowDeletingEvent) Is Nothing) Then
                RaiseEvent JobRateRowDeleting(Me, New JobRateRowChangeEvent(CType(e.Row,JobRateRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveJobRateRow(ByVal row As JobRateRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class JobRateRow
        Inherits DataRow
        
        Private tableJobRate As JobRateDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableJobRate = CType(Me.Table,JobRateDataTable)
        End Sub
        
        Public Property JobNo As String
            Get
                Return CType(Me(Me.tableJobRate.JobNoColumn),String)
            End Get
            Set
                Me(Me.tableJobRate.JobNoColumn) = value
            End Set
        End Property
        
        Public Property Rate As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableJobRate.RateColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableJobRate.RateColumn) = value
            End Set
        End Property
        
        Public Property TypeCode As String
            Get
                Return CType(Me(Me.tableJobRate.TypeCodeColumn),String)
            End Get
            Set
                Me(Me.tableJobRate.TypeCodeColumn) = value
            End Set
        End Property
        
        Public Function IsRateNull() As Boolean
            Return Me.IsNull(Me.tableJobRate.RateColumn)
        End Function
        
        Public Sub SetRateNull()
            Me(Me.tableJobRate.RateColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class JobRateRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As JobRateRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As JobRateRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As JobRateRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ProductTypeDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnTypeCode As DataColumn
        
        Private columnWeight As DataColumn
        
        Friend Sub New()
            MyBase.New("ProductType")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property TypeCodeColumn As DataColumn
            Get
                Return Me.columnTypeCode
            End Get
        End Property
        
        Friend ReadOnly Property WeightColumn As DataColumn
            Get
                Return Me.columnWeight
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ProductTypeRow
            Get
                Return CType(Me.Rows(index),ProductTypeRow)
            End Get
        End Property
        
        Public Event ProductTypeRowChanged As ProductTypeRowChangeEventHandler
        
        Public Event ProductTypeRowChanging As ProductTypeRowChangeEventHandler
        
        Public Event ProductTypeRowDeleted As ProductTypeRowChangeEventHandler
        
        Public Event ProductTypeRowDeleting As ProductTypeRowChangeEventHandler
        
        Public Overloads Sub AddProductTypeRow(ByVal row As ProductTypeRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddProductTypeRow(ByVal TypeCode As String, ByVal Weight As Double) As ProductTypeRow
            Dim rowProductTypeRow As ProductTypeRow = CType(Me.NewRow,ProductTypeRow)
            rowProductTypeRow.ItemArray = New Object() {TypeCode, Weight}
            Me.Rows.Add(rowProductTypeRow)
            Return rowProductTypeRow
        End Function
        
        Public Function FindByTypeCode(ByVal TypeCode As String) As ProductTypeRow
            Return CType(Me.Rows.Find(New Object() {TypeCode}),ProductTypeRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ProductTypeDataTable = CType(MyBase.Clone,ProductTypeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ProductTypeDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnTypeCode = Me.Columns("TypeCode")
            Me.columnWeight = Me.Columns("Weight")
        End Sub
        
        Private Sub InitClass()
            Me.columnTypeCode = New DataColumn("TypeCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTypeCode)
            Me.columnWeight = New DataColumn("Weight", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnWeight)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnTypeCode}, true))
            Me.columnTypeCode.AllowDBNull = false
            Me.columnTypeCode.Unique = true
        End Sub
        
        Public Function NewProductTypeRow() As ProductTypeRow
            Return CType(Me.NewRow,ProductTypeRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ProductTypeRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ProductTypeRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ProductTypeRowChangedEvent) Is Nothing) Then
                RaiseEvent ProductTypeRowChanged(Me, New ProductTypeRowChangeEvent(CType(e.Row,ProductTypeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ProductTypeRowChangingEvent) Is Nothing) Then
                RaiseEvent ProductTypeRowChanging(Me, New ProductTypeRowChangeEvent(CType(e.Row,ProductTypeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ProductTypeRowDeletedEvent) Is Nothing) Then
                RaiseEvent ProductTypeRowDeleted(Me, New ProductTypeRowChangeEvent(CType(e.Row,ProductTypeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ProductTypeRowDeletingEvent) Is Nothing) Then
                RaiseEvent ProductTypeRowDeleting(Me, New ProductTypeRowChangeEvent(CType(e.Row,ProductTypeRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveProductTypeRow(ByVal row As ProductTypeRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ProductTypeRow
        Inherits DataRow
        
        Private tableProductType As ProductTypeDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableProductType = CType(Me.Table,ProductTypeDataTable)
        End Sub
        
        Public Property TypeCode As String
            Get
                Return CType(Me(Me.tableProductType.TypeCodeColumn),String)
            End Get
            Set
                Me(Me.tableProductType.TypeCodeColumn) = value
            End Set
        End Property
        
        Public Property Weight As Double
            Get
                Try 
                    Return CType(Me(Me.tableProductType.WeightColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProductType.WeightColumn) = value
            End Set
        End Property
        
        Public Function IsWeightNull() As Boolean
            Return Me.IsNull(Me.tableProductType.WeightColumn)
        End Function
        
        Public Sub SetWeightNull()
            Me(Me.tableProductType.WeightColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ProductTypeRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ProductTypeRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ProductTypeRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ProductTypeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CompanyDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnAddress As DataColumn
        
        Private columnAddressLine2 As DataColumn
        
        Private columnAddressLine3 As DataColumn
        
        Private columnAddressLine4 As DataColumn
        
        Private columnCompanyName As DataColumn
        
        Private columnCompanyNo As DataColumn
        
        Private columnEmail As DataColumn
        
        Private columnFax As DataColumn
        
        Private columnLastCutNum As DataColumn
        
        Private columnLastInvNum As DataColumn
        
        Private columnMessage As DataColumn
        
        Private columnPostalCode As DataColumn
        
        Private columnRegNo As DataColumn
        
        Private columnTelephone As DataColumn
        
        Private columnUnitOfMeas As DataColumn
        
        Private columnVatNo As DataColumn
        
        Private columnVatPerc As DataColumn
        
        Private columnWebsite As DataColumn
        
        Private column_No_Name As DataColumn
        
        Friend Sub New()
            MyBase.New("Company")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property AddressColumn As DataColumn
            Get
                Return Me.columnAddress
            End Get
        End Property
        
        Friend ReadOnly Property AddressLine2Column As DataColumn
            Get
                Return Me.columnAddressLine2
            End Get
        End Property
        
        Friend ReadOnly Property AddressLine3Column As DataColumn
            Get
                Return Me.columnAddressLine3
            End Get
        End Property
        
        Friend ReadOnly Property AddressLine4Column As DataColumn
            Get
                Return Me.columnAddressLine4
            End Get
        End Property
        
        Friend ReadOnly Property CompanyNameColumn As DataColumn
            Get
                Return Me.columnCompanyName
            End Get
        End Property
        
        Friend ReadOnly Property CompanyNoColumn As DataColumn
            Get
                Return Me.columnCompanyNo
            End Get
        End Property
        
        Friend ReadOnly Property EmailColumn As DataColumn
            Get
                Return Me.columnEmail
            End Get
        End Property
        
        Friend ReadOnly Property FaxColumn As DataColumn
            Get
                Return Me.columnFax
            End Get
        End Property
        
        Friend ReadOnly Property LastCutNumColumn As DataColumn
            Get
                Return Me.columnLastCutNum
            End Get
        End Property
        
        Friend ReadOnly Property LastInvNumColumn As DataColumn
            Get
                Return Me.columnLastInvNum
            End Get
        End Property
        
        Friend ReadOnly Property MessageColumn As DataColumn
            Get
                Return Me.columnMessage
            End Get
        End Property
        
        Friend ReadOnly Property PostalCodeColumn As DataColumn
            Get
                Return Me.columnPostalCode
            End Get
        End Property
        
        Friend ReadOnly Property RegNoColumn As DataColumn
            Get
                Return Me.columnRegNo
            End Get
        End Property
        
        Friend ReadOnly Property TelephoneColumn As DataColumn
            Get
                Return Me.columnTelephone
            End Get
        End Property
        
        Friend ReadOnly Property UnitOfMeasColumn As DataColumn
            Get
                Return Me.columnUnitOfMeas
            End Get
        End Property
        
        Friend ReadOnly Property VatNoColumn As DataColumn
            Get
                Return Me.columnVatNo
            End Get
        End Property
        
        Friend ReadOnly Property VatPercColumn As DataColumn
            Get
                Return Me.columnVatPerc
            End Get
        End Property
        
        Friend ReadOnly Property WebsiteColumn As DataColumn
            Get
                Return Me.columnWebsite
            End Get
        End Property
        
        Friend ReadOnly Property _No_NameColumn As DataColumn
            Get
                Return Me.column_No_Name
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CompanyRow
            Get
                Return CType(Me.Rows(index),CompanyRow)
            End Get
        End Property
        
        Public Event CompanyRowChanged As CompanyRowChangeEventHandler
        
        Public Event CompanyRowChanging As CompanyRowChangeEventHandler
        
        Public Event CompanyRowDeleted As CompanyRowChangeEventHandler
        
        Public Event CompanyRowDeleting As CompanyRowChangeEventHandler
        
        Public Overloads Sub AddCompanyRow(ByVal row As CompanyRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCompanyRow( _
                    ByVal Address As String,  _
                    ByVal AddressLine2 As String,  _
                    ByVal AddressLine3 As String,  _
                    ByVal AddressLine4 As String,  _
                    ByVal CompanyName As String,  _
                    ByVal CompanyNo As String,  _
                    ByVal Email As String,  _
                    ByVal Fax As String,  _
                    ByVal LastCutNum As Integer,  _
                    ByVal LastInvNum As Integer,  _
                    ByVal Message As String,  _
                    ByVal PostalCode As Integer,  _
                    ByVal RegNo As String,  _
                    ByVal Telephone As String,  _
                    ByVal UnitOfMeas As String,  _
                    ByVal VatNo As String,  _
                    ByVal VatPerc As Decimal,  _
                    ByVal Website As String,  _
                    ByVal _No_Name As String) As CompanyRow
            Dim rowCompanyRow As CompanyRow = CType(Me.NewRow,CompanyRow)
            rowCompanyRow.ItemArray = New Object() {Address, AddressLine2, AddressLine3, AddressLine4, CompanyName, CompanyNo, Email, Fax, LastCutNum, LastInvNum, Message, PostalCode, RegNo, Telephone, UnitOfMeas, VatNo, VatPerc, Website, _No_Name}
            Me.Rows.Add(rowCompanyRow)
            Return rowCompanyRow
        End Function
        
        Public Function FindByCompanyNo(ByVal CompanyNo As String) As CompanyRow
            Return CType(Me.Rows.Find(New Object() {CompanyNo}),CompanyRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CompanyDataTable = CType(MyBase.Clone,CompanyDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CompanyDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnAddress = Me.Columns("Address")
            Me.columnAddressLine2 = Me.Columns("AddressLine2")
            Me.columnAddressLine3 = Me.Columns("AddressLine3")
            Me.columnAddressLine4 = Me.Columns("AddressLine4")
            Me.columnCompanyName = Me.Columns("CompanyName")
            Me.columnCompanyNo = Me.Columns("CompanyNo")
            Me.columnEmail = Me.Columns("Email")
            Me.columnFax = Me.Columns("Fax")
            Me.columnLastCutNum = Me.Columns("LastCutNum")
            Me.columnLastInvNum = Me.Columns("LastInvNum")
            Me.columnMessage = Me.Columns("Message")
            Me.columnPostalCode = Me.Columns("PostalCode")
            Me.columnRegNo = Me.Columns("RegNo")
            Me.columnTelephone = Me.Columns("Telephone")
            Me.columnUnitOfMeas = Me.Columns("UnitOfMeas")
            Me.columnVatNo = Me.Columns("VatNo")
            Me.columnVatPerc = Me.Columns("VatPerc")
            Me.columnWebsite = Me.Columns("Website")
            Me.column_No_Name = Me.Columns("No&Name")
        End Sub
        
        Private Sub InitClass()
            Me.columnAddress = New DataColumn("Address", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAddress)
            Me.columnAddressLine2 = New DataColumn("AddressLine2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAddressLine2)
            Me.columnAddressLine3 = New DataColumn("AddressLine3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAddressLine3)
            Me.columnAddressLine4 = New DataColumn("AddressLine4", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAddressLine4)
            Me.columnCompanyName = New DataColumn("CompanyName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCompanyName)
            Me.columnCompanyNo = New DataColumn("CompanyNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCompanyNo)
            Me.columnEmail = New DataColumn("Email", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEmail)
            Me.columnFax = New DataColumn("Fax", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFax)
            Me.columnLastCutNum = New DataColumn("LastCutNum", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLastCutNum)
            Me.columnLastInvNum = New DataColumn("LastInvNum", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLastInvNum)
            Me.columnMessage = New DataColumn("Message", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMessage)
            Me.columnPostalCode = New DataColumn("PostalCode", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPostalCode)
            Me.columnRegNo = New DataColumn("RegNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRegNo)
            Me.columnTelephone = New DataColumn("Telephone", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTelephone)
            Me.columnUnitOfMeas = New DataColumn("UnitOfMeas", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUnitOfMeas)
            Me.columnVatNo = New DataColumn("VatNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVatNo)
            Me.columnVatPerc = New DataColumn("VatPerc", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVatPerc)
            Me.columnWebsite = New DataColumn("Website", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnWebsite)
            Me.column_No_Name = New DataColumn("No&Name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column_No_Name)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnCompanyNo}, true))
            Me.columnCompanyNo.AllowDBNull = false
            Me.columnCompanyNo.Unique = true
            Me.column_No_Name.ReadOnly = true
        End Sub
        
        Public Function NewCompanyRow() As CompanyRow
            Return CType(Me.NewRow,CompanyRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CompanyRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CompanyRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CompanyRowChangedEvent) Is Nothing) Then
                RaiseEvent CompanyRowChanged(Me, New CompanyRowChangeEvent(CType(e.Row,CompanyRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CompanyRowChangingEvent) Is Nothing) Then
                RaiseEvent CompanyRowChanging(Me, New CompanyRowChangeEvent(CType(e.Row,CompanyRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CompanyRowDeletedEvent) Is Nothing) Then
                RaiseEvent CompanyRowDeleted(Me, New CompanyRowChangeEvent(CType(e.Row,CompanyRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CompanyRowDeletingEvent) Is Nothing) Then
                RaiseEvent CompanyRowDeleting(Me, New CompanyRowChangeEvent(CType(e.Row,CompanyRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCompanyRow(ByVal row As CompanyRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CompanyRow
        Inherits DataRow
        
        Private tableCompany As CompanyDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCompany = CType(Me.Table,CompanyDataTable)
        End Sub
        
        Public Property Address As String
            Get
                Try 
                    Return CType(Me(Me.tableCompany.AddressColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany.AddressColumn) = value
            End Set
        End Property
        
        Public Property AddressLine2 As String
            Get
                Try 
                    Return CType(Me(Me.tableCompany.AddressLine2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany.AddressLine2Column) = value
            End Set
        End Property
        
        Public Property AddressLine3 As String
            Get
                Try 
                    Return CType(Me(Me.tableCompany.AddressLine3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany.AddressLine3Column) = value
            End Set
        End Property
        
        Public Property AddressLine4 As String
            Get
                Try 
                    Return CType(Me(Me.tableCompany.AddressLine4Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany.AddressLine4Column) = value
            End Set
        End Property
        
        Public Property CompanyName As String
            Get
                Try 
                    Return CType(Me(Me.tableCompany.CompanyNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany.CompanyNameColumn) = value
            End Set
        End Property
        
        Public Property CompanyNo As String
            Get
                Return CType(Me(Me.tableCompany.CompanyNoColumn),String)
            End Get
            Set
                Me(Me.tableCompany.CompanyNoColumn) = value
            End Set
        End Property
        
        Public Property Email As String
            Get
                Try 
                    Return CType(Me(Me.tableCompany.EmailColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany.EmailColumn) = value
            End Set
        End Property
        
        Public Property Fax As String
            Get
                Try 
                    Return CType(Me(Me.tableCompany.FaxColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany.FaxColumn) = value
            End Set
        End Property
        
        Public Property LastCutNum As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCompany.LastCutNumColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany.LastCutNumColumn) = value
            End Set
        End Property
        
        Public Property LastInvNum As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCompany.LastInvNumColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany.LastInvNumColumn) = value
            End Set
        End Property
        
        Public Property Message As String
            Get
                Try 
                    Return CType(Me(Me.tableCompany.MessageColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany.MessageColumn) = value
            End Set
        End Property
        
        Public Property PostalCode As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCompany.PostalCodeColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany.PostalCodeColumn) = value
            End Set
        End Property
        
        Public Property RegNo As String
            Get
                Try 
                    Return CType(Me(Me.tableCompany.RegNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany.RegNoColumn) = value
            End Set
        End Property
        
        Public Property Telephone As String
            Get
                Try 
                    Return CType(Me(Me.tableCompany.TelephoneColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany.TelephoneColumn) = value
            End Set
        End Property
        
        Public Property UnitOfMeas As String
            Get
                Try 
                    Return CType(Me(Me.tableCompany.UnitOfMeasColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany.UnitOfMeasColumn) = value
            End Set
        End Property
        
        Public Property VatNo As String
            Get
                Try 
                    Return CType(Me(Me.tableCompany.VatNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany.VatNoColumn) = value
            End Set
        End Property
        
        Public Property VatPerc As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCompany.VatPercColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany.VatPercColumn) = value
            End Set
        End Property
        
        Public Property Website As String
            Get
                Try 
                    Return CType(Me(Me.tableCompany.WebsiteColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany.WebsiteColumn) = value
            End Set
        End Property
        
        Public Property _No_Name As String
            Get
                Try 
                    Return CType(Me(Me.tableCompany._No_NameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCompany._No_NameColumn) = value
            End Set
        End Property
        
        Public Function IsAddressNull() As Boolean
            Return Me.IsNull(Me.tableCompany.AddressColumn)
        End Function
        
        Public Sub SetAddressNull()
            Me(Me.tableCompany.AddressColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAddressLine2Null() As Boolean
            Return Me.IsNull(Me.tableCompany.AddressLine2Column)
        End Function
        
        Public Sub SetAddressLine2Null()
            Me(Me.tableCompany.AddressLine2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsAddressLine3Null() As Boolean
            Return Me.IsNull(Me.tableCompany.AddressLine3Column)
        End Function
        
        Public Sub SetAddressLine3Null()
            Me(Me.tableCompany.AddressLine3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsAddressLine4Null() As Boolean
            Return Me.IsNull(Me.tableCompany.AddressLine4Column)
        End Function
        
        Public Sub SetAddressLine4Null()
            Me(Me.tableCompany.AddressLine4Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCompanyNameNull() As Boolean
            Return Me.IsNull(Me.tableCompany.CompanyNameColumn)
        End Function
        
        Public Sub SetCompanyNameNull()
            Me(Me.tableCompany.CompanyNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEmailNull() As Boolean
            Return Me.IsNull(Me.tableCompany.EmailColumn)
        End Function
        
        Public Sub SetEmailNull()
            Me(Me.tableCompany.EmailColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFaxNull() As Boolean
            Return Me.IsNull(Me.tableCompany.FaxColumn)
        End Function
        
        Public Sub SetFaxNull()
            Me(Me.tableCompany.FaxColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLastCutNumNull() As Boolean
            Return Me.IsNull(Me.tableCompany.LastCutNumColumn)
        End Function
        
        Public Sub SetLastCutNumNull()
            Me(Me.tableCompany.LastCutNumColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLastInvNumNull() As Boolean
            Return Me.IsNull(Me.tableCompany.LastInvNumColumn)
        End Function
        
        Public Sub SetLastInvNumNull()
            Me(Me.tableCompany.LastInvNumColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMessageNull() As Boolean
            Return Me.IsNull(Me.tableCompany.MessageColumn)
        End Function
        
        Public Sub SetMessageNull()
            Me(Me.tableCompany.MessageColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPostalCodeNull() As Boolean
            Return Me.IsNull(Me.tableCompany.PostalCodeColumn)
        End Function
        
        Public Sub SetPostalCodeNull()
            Me(Me.tableCompany.PostalCodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRegNoNull() As Boolean
            Return Me.IsNull(Me.tableCompany.RegNoColumn)
        End Function
        
        Public Sub SetRegNoNull()
            Me(Me.tableCompany.RegNoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTelephoneNull() As Boolean
            Return Me.IsNull(Me.tableCompany.TelephoneColumn)
        End Function
        
        Public Sub SetTelephoneNull()
            Me(Me.tableCompany.TelephoneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUnitOfMeasNull() As Boolean
            Return Me.IsNull(Me.tableCompany.UnitOfMeasColumn)
        End Function
        
        Public Sub SetUnitOfMeasNull()
            Me(Me.tableCompany.UnitOfMeasColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVatNoNull() As Boolean
            Return Me.IsNull(Me.tableCompany.VatNoColumn)
        End Function
        
        Public Sub SetVatNoNull()
            Me(Me.tableCompany.VatNoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVatPercNull() As Boolean
            Return Me.IsNull(Me.tableCompany.VatPercColumn)
        End Function
        
        Public Sub SetVatPercNull()
            Me(Me.tableCompany.VatPercColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsWebsiteNull() As Boolean
            Return Me.IsNull(Me.tableCompany.WebsiteColumn)
        End Function
        
        Public Sub SetWebsiteNull()
            Me(Me.tableCompany.WebsiteColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Is_No_NameNull() As Boolean
            Return Me.IsNull(Me.tableCompany._No_NameColumn)
        End Function
        
        Public Sub Set_No_NameNull()
            Me(Me.tableCompany._No_NameColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CompanyRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CompanyRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CompanyRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CompanyRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ContractorDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private column_ActiveY_N As DataColumn
        
        Private columnAddressLine1 As DataColumn
        
        Private columnAddressLine2 As DataColumn
        
        Private columnAddressLine3 As DataColumn
        
        Private columnAddressLine4 As DataColumn
        
        Private columnContractorName As DataColumn
        
        Private columnContractorNo As DataColumn
        
        Private columnPostalCode As DataColumn
        
        Private columnReg_No As DataColumn
        
        Private columnTelephone As DataColumn
        
        Private columnVAT_No As DataColumn
        
        Private column_No_Name As DataColumn
        
        Friend Sub New()
            MyBase.New("Contractor")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property _ActiveY_NColumn As DataColumn
            Get
                Return Me.column_ActiveY_N
            End Get
        End Property
        
        Friend ReadOnly Property AddressLine1Column As DataColumn
            Get
                Return Me.columnAddressLine1
            End Get
        End Property
        
        Friend ReadOnly Property AddressLine2Column As DataColumn
            Get
                Return Me.columnAddressLine2
            End Get
        End Property
        
        Friend ReadOnly Property AddressLine3Column As DataColumn
            Get
                Return Me.columnAddressLine3
            End Get
        End Property
        
        Friend ReadOnly Property AddressLine4Column As DataColumn
            Get
                Return Me.columnAddressLine4
            End Get
        End Property
        
        Friend ReadOnly Property ContractorNameColumn As DataColumn
            Get
                Return Me.columnContractorName
            End Get
        End Property
        
        Friend ReadOnly Property ContractorNoColumn As DataColumn
            Get
                Return Me.columnContractorNo
            End Get
        End Property
        
        Friend ReadOnly Property PostalCodeColumn As DataColumn
            Get
                Return Me.columnPostalCode
            End Get
        End Property
        
        Friend ReadOnly Property Reg_NoColumn As DataColumn
            Get
                Return Me.columnReg_No
            End Get
        End Property
        
        Friend ReadOnly Property TelephoneColumn As DataColumn
            Get
                Return Me.columnTelephone
            End Get
        End Property
        
        Friend ReadOnly Property VAT_NoColumn As DataColumn
            Get
                Return Me.columnVAT_No
            End Get
        End Property
        
        Friend ReadOnly Property _No_NameColumn As DataColumn
            Get
                Return Me.column_No_Name
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ContractorRow
            Get
                Return CType(Me.Rows(index),ContractorRow)
            End Get
        End Property
        
        Public Event ContractorRowChanged As ContractorRowChangeEventHandler
        
        Public Event ContractorRowChanging As ContractorRowChangeEventHandler
        
        Public Event ContractorRowDeleted As ContractorRowChangeEventHandler
        
        Public Event ContractorRowDeleting As ContractorRowChangeEventHandler
        
        Public Overloads Sub AddContractorRow(ByVal row As ContractorRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddContractorRow(ByVal _ActiveY_N As Boolean, ByVal AddressLine1 As String, ByVal AddressLine2 As String, ByVal AddressLine3 As String, ByVal AddressLine4 As String, ByVal ContractorName As String, ByVal ContractorNo As String, ByVal PostalCode As Integer, ByVal Reg_No As String, ByVal Telephone As String, ByVal VAT_No As String, ByVal _No_Name As String) As ContractorRow
            Dim rowContractorRow As ContractorRow = CType(Me.NewRow,ContractorRow)
            rowContractorRow.ItemArray = New Object() {_ActiveY_N, AddressLine1, AddressLine2, AddressLine3, AddressLine4, ContractorName, ContractorNo, PostalCode, Reg_No, Telephone, VAT_No, _No_Name}
            Me.Rows.Add(rowContractorRow)
            Return rowContractorRow
        End Function
        
        Public Function FindByContractorNo(ByVal ContractorNo As String) As ContractorRow
            Return CType(Me.Rows.Find(New Object() {ContractorNo}),ContractorRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ContractorDataTable = CType(MyBase.Clone,ContractorDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ContractorDataTable
        End Function
        
        Friend Sub InitVars()
            Me.column_ActiveY_N = Me.Columns("ActiveY/N")
            Me.columnAddressLine1 = Me.Columns("AddressLine1")
            Me.columnAddressLine2 = Me.Columns("AddressLine2")
            Me.columnAddressLine3 = Me.Columns("AddressLine3")
            Me.columnAddressLine4 = Me.Columns("AddressLine4")
            Me.columnContractorName = Me.Columns("ContractorName")
            Me.columnContractorNo = Me.Columns("ContractorNo")
            Me.columnPostalCode = Me.Columns("PostalCode")
            Me.columnReg_No = Me.Columns("Reg No")
            Me.columnTelephone = Me.Columns("Telephone")
            Me.columnVAT_No = Me.Columns("VAT No")
            Me.column_No_Name = Me.Columns("No&Name")
        End Sub
        
        Private Sub InitClass()
            Me.column_ActiveY_N = New DataColumn("ActiveY/N", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column_ActiveY_N)
            Me.columnAddressLine1 = New DataColumn("AddressLine1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAddressLine1)
            Me.columnAddressLine2 = New DataColumn("AddressLine2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAddressLine2)
            Me.columnAddressLine3 = New DataColumn("AddressLine3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAddressLine3)
            Me.columnAddressLine4 = New DataColumn("AddressLine4", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAddressLine4)
            Me.columnContractorName = New DataColumn("ContractorName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnContractorName)
            Me.columnContractorNo = New DataColumn("ContractorNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnContractorNo)
            Me.columnPostalCode = New DataColumn("PostalCode", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPostalCode)
            Me.columnReg_No = New DataColumn("Reg No", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnReg_No)
            Me.columnTelephone = New DataColumn("Telephone", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTelephone)
            Me.columnVAT_No = New DataColumn("VAT No", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVAT_No)
            Me.column_No_Name = New DataColumn("No&Name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column_No_Name)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnContractorNo}, true))
            Me.columnContractorNo.AllowDBNull = false
            Me.columnContractorNo.Unique = true
            Me.column_No_Name.ReadOnly = true
        End Sub
        
        Public Function NewContractorRow() As ContractorRow
            Return CType(Me.NewRow,ContractorRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ContractorRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ContractorRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ContractorRowChangedEvent) Is Nothing) Then
                RaiseEvent ContractorRowChanged(Me, New ContractorRowChangeEvent(CType(e.Row,ContractorRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ContractorRowChangingEvent) Is Nothing) Then
                RaiseEvent ContractorRowChanging(Me, New ContractorRowChangeEvent(CType(e.Row,ContractorRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ContractorRowDeletedEvent) Is Nothing) Then
                RaiseEvent ContractorRowDeleted(Me, New ContractorRowChangeEvent(CType(e.Row,ContractorRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ContractorRowDeletingEvent) Is Nothing) Then
                RaiseEvent ContractorRowDeleting(Me, New ContractorRowChangeEvent(CType(e.Row,ContractorRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveContractorRow(ByVal row As ContractorRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ContractorRow
        Inherits DataRow
        
        Private tableContractor As ContractorDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableContractor = CType(Me.Table,ContractorDataTable)
        End Sub
        
        Public Property _ActiveY_N As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableContractor._ActiveY_NColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableContractor._ActiveY_NColumn) = value
            End Set
        End Property
        
        Public Property AddressLine1 As String
            Get
                Try 
                    Return CType(Me(Me.tableContractor.AddressLine1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableContractor.AddressLine1Column) = value
            End Set
        End Property
        
        Public Property AddressLine2 As String
            Get
                Try 
                    Return CType(Me(Me.tableContractor.AddressLine2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableContractor.AddressLine2Column) = value
            End Set
        End Property
        
        Public Property AddressLine3 As String
            Get
                Try 
                    Return CType(Me(Me.tableContractor.AddressLine3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableContractor.AddressLine3Column) = value
            End Set
        End Property
        
        Public Property AddressLine4 As String
            Get
                Try 
                    Return CType(Me(Me.tableContractor.AddressLine4Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableContractor.AddressLine4Column) = value
            End Set
        End Property
        
        Public Property ContractorName As String
            Get
                Try 
                    Return CType(Me(Me.tableContractor.ContractorNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableContractor.ContractorNameColumn) = value
            End Set
        End Property
        
        Public Property ContractorNo As String
            Get
                Return CType(Me(Me.tableContractor.ContractorNoColumn),String)
            End Get
            Set
                Me(Me.tableContractor.ContractorNoColumn) = value
            End Set
        End Property
        
        Public Property PostalCode As Integer
            Get
                Try 
                    Return CType(Me(Me.tableContractor.PostalCodeColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableContractor.PostalCodeColumn) = value
            End Set
        End Property
        
        Public Property Reg_No As String
            Get
                Try 
                    Return CType(Me(Me.tableContractor.Reg_NoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableContractor.Reg_NoColumn) = value
            End Set
        End Property
        
        Public Property Telephone As String
            Get
                Try 
                    Return CType(Me(Me.tableContractor.TelephoneColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableContractor.TelephoneColumn) = value
            End Set
        End Property
        
        Public Property VAT_No As String
            Get
                Try 
                    Return CType(Me(Me.tableContractor.VAT_NoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableContractor.VAT_NoColumn) = value
            End Set
        End Property
        
        Public Property _No_Name As String
            Get
                Try 
                    Return CType(Me(Me.tableContractor._No_NameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableContractor._No_NameColumn) = value
            End Set
        End Property
        
        Public Function Is_ActiveY_NNull() As Boolean
            Return Me.IsNull(Me.tableContractor._ActiveY_NColumn)
        End Function
        
        Public Sub Set_ActiveY_NNull()
            Me(Me.tableContractor._ActiveY_NColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAddressLine1Null() As Boolean
            Return Me.IsNull(Me.tableContractor.AddressLine1Column)
        End Function
        
        Public Sub SetAddressLine1Null()
            Me(Me.tableContractor.AddressLine1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsAddressLine2Null() As Boolean
            Return Me.IsNull(Me.tableContractor.AddressLine2Column)
        End Function
        
        Public Sub SetAddressLine2Null()
            Me(Me.tableContractor.AddressLine2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsAddressLine3Null() As Boolean
            Return Me.IsNull(Me.tableContractor.AddressLine3Column)
        End Function
        
        Public Sub SetAddressLine3Null()
            Me(Me.tableContractor.AddressLine3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsAddressLine4Null() As Boolean
            Return Me.IsNull(Me.tableContractor.AddressLine4Column)
        End Function
        
        Public Sub SetAddressLine4Null()
            Me(Me.tableContractor.AddressLine4Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsContractorNameNull() As Boolean
            Return Me.IsNull(Me.tableContractor.ContractorNameColumn)
        End Function
        
        Public Sub SetContractorNameNull()
            Me(Me.tableContractor.ContractorNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPostalCodeNull() As Boolean
            Return Me.IsNull(Me.tableContractor.PostalCodeColumn)
        End Function
        
        Public Sub SetPostalCodeNull()
            Me(Me.tableContractor.PostalCodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsReg_NoNull() As Boolean
            Return Me.IsNull(Me.tableContractor.Reg_NoColumn)
        End Function
        
        Public Sub SetReg_NoNull()
            Me(Me.tableContractor.Reg_NoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTelephoneNull() As Boolean
            Return Me.IsNull(Me.tableContractor.TelephoneColumn)
        End Function
        
        Public Sub SetTelephoneNull()
            Me(Me.tableContractor.TelephoneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVAT_NoNull() As Boolean
            Return Me.IsNull(Me.tableContractor.VAT_NoColumn)
        End Function
        
        Public Sub SetVAT_NoNull()
            Me(Me.tableContractor.VAT_NoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Is_No_NameNull() As Boolean
            Return Me.IsNull(Me.tableContractor._No_NameColumn)
        End Function
        
        Public Sub Set_No_NameNull()
            Me(Me.tableContractor._No_NameColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ContractorRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ContractorRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ContractorRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ContractorRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CuttingSheetDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCSHeading As DataColumn
        
        Private columnCutDate As DataColumn
        
        Private columnCutSheetNo As DataColumn
        
        Private columnDetails As DataColumn
        
        Private columnInvoiceNo As DataColumn
        
        Private columnJob_No As DataColumn
        
        Friend Sub New()
            MyBase.New("CuttingSheet")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CSHeadingColumn As DataColumn
            Get
                Return Me.columnCSHeading
            End Get
        End Property
        
        Friend ReadOnly Property CutDateColumn As DataColumn
            Get
                Return Me.columnCutDate
            End Get
        End Property
        
        Friend ReadOnly Property CutSheetNoColumn As DataColumn
            Get
                Return Me.columnCutSheetNo
            End Get
        End Property
        
        Friend ReadOnly Property DetailsColumn As DataColumn
            Get
                Return Me.columnDetails
            End Get
        End Property
        
        Friend ReadOnly Property InvoiceNoColumn As DataColumn
            Get
                Return Me.columnInvoiceNo
            End Get
        End Property
        
        Friend ReadOnly Property Job_NoColumn As DataColumn
            Get
                Return Me.columnJob_No
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CuttingSheetRow
            Get
                Return CType(Me.Rows(index),CuttingSheetRow)
            End Get
        End Property
        
        Public Event CuttingSheetRowChanged As CuttingSheetRowChangeEventHandler
        
        Public Event CuttingSheetRowChanging As CuttingSheetRowChangeEventHandler
        
        Public Event CuttingSheetRowDeleted As CuttingSheetRowChangeEventHandler
        
        Public Event CuttingSheetRowDeleting As CuttingSheetRowChangeEventHandler
        
        Public Overloads Sub AddCuttingSheetRow(ByVal row As CuttingSheetRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCuttingSheetRow(ByVal CSHeading As String, ByVal CutDate As Date, ByVal CutSheetNo As Integer, ByVal Details As String, ByVal InvoiceNo As Integer, ByVal Job_No As String) As CuttingSheetRow
            Dim rowCuttingSheetRow As CuttingSheetRow = CType(Me.NewRow,CuttingSheetRow)
            rowCuttingSheetRow.ItemArray = New Object() {CSHeading, CutDate, CutSheetNo, Details, InvoiceNo, Job_No}
            Me.Rows.Add(rowCuttingSheetRow)
            Return rowCuttingSheetRow
        End Function
        
        Public Function FindByCutSheetNo(ByVal CutSheetNo As Integer) As CuttingSheetRow
            Return CType(Me.Rows.Find(New Object() {CutSheetNo}),CuttingSheetRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CuttingSheetDataTable = CType(MyBase.Clone,CuttingSheetDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CuttingSheetDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCSHeading = Me.Columns("CSHeading")
            Me.columnCutDate = Me.Columns("CutDate")
            Me.columnCutSheetNo = Me.Columns("CutSheetNo")
            Me.columnDetails = Me.Columns("Details")
            Me.columnInvoiceNo = Me.Columns("InvoiceNo")
            Me.columnJob_No = Me.Columns("Job No")
        End Sub
        
        Private Sub InitClass()
            Me.columnCSHeading = New DataColumn("CSHeading", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCSHeading)
            Me.columnCutDate = New DataColumn("CutDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCutDate)
            Me.columnCutSheetNo = New DataColumn("CutSheetNo", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCutSheetNo)
            Me.columnDetails = New DataColumn("Details", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDetails)
            Me.columnInvoiceNo = New DataColumn("InvoiceNo", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInvoiceNo)
            Me.columnJob_No = New DataColumn("Job No", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnJob_No)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnCutSheetNo}, true))
            Me.columnCutSheetNo.AllowDBNull = false
            Me.columnCutSheetNo.Unique = true
        End Sub
        
        Public Function NewCuttingSheetRow() As CuttingSheetRow
            Return CType(Me.NewRow,CuttingSheetRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CuttingSheetRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CuttingSheetRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CuttingSheetRowChangedEvent) Is Nothing) Then
                RaiseEvent CuttingSheetRowChanged(Me, New CuttingSheetRowChangeEvent(CType(e.Row,CuttingSheetRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CuttingSheetRowChangingEvent) Is Nothing) Then
                RaiseEvent CuttingSheetRowChanging(Me, New CuttingSheetRowChangeEvent(CType(e.Row,CuttingSheetRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CuttingSheetRowDeletedEvent) Is Nothing) Then
                RaiseEvent CuttingSheetRowDeleted(Me, New CuttingSheetRowChangeEvent(CType(e.Row,CuttingSheetRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CuttingSheetRowDeletingEvent) Is Nothing) Then
                RaiseEvent CuttingSheetRowDeleting(Me, New CuttingSheetRowChangeEvent(CType(e.Row,CuttingSheetRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCuttingSheetRow(ByVal row As CuttingSheetRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CuttingSheetRow
        Inherits DataRow
        
        Private tableCuttingSheet As CuttingSheetDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCuttingSheet = CType(Me.Table,CuttingSheetDataTable)
        End Sub
        
        Public Property CSHeading As String
            Get
                Try 
                    Return CType(Me(Me.tableCuttingSheet.CSHeadingColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCuttingSheet.CSHeadingColumn) = value
            End Set
        End Property
        
        Public Property CutDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableCuttingSheet.CutDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCuttingSheet.CutDateColumn) = value
            End Set
        End Property
        
        Public Property CutSheetNo As Integer
            Get
                Return CType(Me(Me.tableCuttingSheet.CutSheetNoColumn),Integer)
            End Get
            Set
                Me(Me.tableCuttingSheet.CutSheetNoColumn) = value
            End Set
        End Property
        
        Public Property Details As String
            Get
                Try 
                    Return CType(Me(Me.tableCuttingSheet.DetailsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCuttingSheet.DetailsColumn) = value
            End Set
        End Property
        
        Public Property InvoiceNo As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCuttingSheet.InvoiceNoColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCuttingSheet.InvoiceNoColumn) = value
            End Set
        End Property
        
        Public Property Job_No As String
            Get
                Try 
                    Return CType(Me(Me.tableCuttingSheet.Job_NoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCuttingSheet.Job_NoColumn) = value
            End Set
        End Property
        
        Public Function IsCSHeadingNull() As Boolean
            Return Me.IsNull(Me.tableCuttingSheet.CSHeadingColumn)
        End Function
        
        Public Sub SetCSHeadingNull()
            Me(Me.tableCuttingSheet.CSHeadingColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCutDateNull() As Boolean
            Return Me.IsNull(Me.tableCuttingSheet.CutDateColumn)
        End Function
        
        Public Sub SetCutDateNull()
            Me(Me.tableCuttingSheet.CutDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDetailsNull() As Boolean
            Return Me.IsNull(Me.tableCuttingSheet.DetailsColumn)
        End Function
        
        Public Sub SetDetailsNull()
            Me(Me.tableCuttingSheet.DetailsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsInvoiceNoNull() As Boolean
            Return Me.IsNull(Me.tableCuttingSheet.InvoiceNoColumn)
        End Function
        
        Public Sub SetInvoiceNoNull()
            Me(Me.tableCuttingSheet.InvoiceNoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsJob_NoNull() As Boolean
            Return Me.IsNull(Me.tableCuttingSheet.Job_NoColumn)
        End Function
        
        Public Sub SetJob_NoNull()
            Me(Me.tableCuttingSheet.Job_NoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CuttingSheetRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CuttingSheetRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CuttingSheetRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CuttingSheetRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class JobDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnAddedDiscount As DataColumn
        
        Private columnCompanyNo As DataColumn
        
        Private columnContractorNo As DataColumn
        
        Private columnDesign As DataColumn
        
        Private columnDiscount As DataColumn
        
        Private columnJobName As DataColumn
        
        Private columnJobNo As DataColumn
        
        Private columnOrderNo As DataColumn
        
        Private columnTons_Or_Kilograms As DataColumn
        
        Private columnUnitOfMeas As DataColumn
        
        Private column_No_Name As DataColumn
        
        Friend Sub New()
            MyBase.New("Job")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property AddedDiscountColumn As DataColumn
            Get
                Return Me.columnAddedDiscount
            End Get
        End Property
        
        Friend ReadOnly Property CompanyNoColumn As DataColumn
            Get
                Return Me.columnCompanyNo
            End Get
        End Property
        
        Friend ReadOnly Property ContractorNoColumn As DataColumn
            Get
                Return Me.columnContractorNo
            End Get
        End Property
        
        Friend ReadOnly Property DesignColumn As DataColumn
            Get
                Return Me.columnDesign
            End Get
        End Property
        
        Friend ReadOnly Property DiscountColumn As DataColumn
            Get
                Return Me.columnDiscount
            End Get
        End Property
        
        Friend ReadOnly Property JobNameColumn As DataColumn
            Get
                Return Me.columnJobName
            End Get
        End Property
        
        Friend ReadOnly Property JobNoColumn As DataColumn
            Get
                Return Me.columnJobNo
            End Get
        End Property
        
        Friend ReadOnly Property OrderNoColumn As DataColumn
            Get
                Return Me.columnOrderNo
            End Get
        End Property
        
        Friend ReadOnly Property Tons_Or_KilogramsColumn As DataColumn
            Get
                Return Me.columnTons_Or_Kilograms
            End Get
        End Property
        
        Friend ReadOnly Property UnitOfMeasColumn As DataColumn
            Get
                Return Me.columnUnitOfMeas
            End Get
        End Property
        
        Friend ReadOnly Property _No_NameColumn As DataColumn
            Get
                Return Me.column_No_Name
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As JobRow
            Get
                Return CType(Me.Rows(index),JobRow)
            End Get
        End Property
        
        Public Event JobRowChanged As JobRowChangeEventHandler
        
        Public Event JobRowChanging As JobRowChangeEventHandler
        
        Public Event JobRowDeleted As JobRowChangeEventHandler
        
        Public Event JobRowDeleting As JobRowChangeEventHandler
        
        Public Overloads Sub AddJobRow(ByVal row As JobRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddJobRow(ByVal AddedDiscount As Decimal, ByVal CompanyNo As String, ByVal ContractorNo As String, ByVal Design As Decimal, ByVal Discount As Integer, ByVal JobName As String, ByVal JobNo As String, ByVal OrderNo As String, ByVal Tons_Or_Kilograms As String, ByVal UnitOfMeas As String, ByVal _No_Name As String) As JobRow
            Dim rowJobRow As JobRow = CType(Me.NewRow,JobRow)
            rowJobRow.ItemArray = New Object() {AddedDiscount, CompanyNo, ContractorNo, Design, Discount, JobName, JobNo, OrderNo, Tons_Or_Kilograms, UnitOfMeas, _No_Name}
            Me.Rows.Add(rowJobRow)
            Return rowJobRow
        End Function
        
        Public Function FindByJobNo(ByVal JobNo As String) As JobRow
            Return CType(Me.Rows.Find(New Object() {JobNo}),JobRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As JobDataTable = CType(MyBase.Clone,JobDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New JobDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnAddedDiscount = Me.Columns("AddedDiscount")
            Me.columnCompanyNo = Me.Columns("CompanyNo")
            Me.columnContractorNo = Me.Columns("ContractorNo")
            Me.columnDesign = Me.Columns("Design")
            Me.columnDiscount = Me.Columns("Discount")
            Me.columnJobName = Me.Columns("JobName")
            Me.columnJobNo = Me.Columns("JobNo")
            Me.columnOrderNo = Me.Columns("OrderNo")
            Me.columnTons_Or_Kilograms = Me.Columns("Tons Or Kilograms")
            Me.columnUnitOfMeas = Me.Columns("UnitOfMeas")
            Me.column_No_Name = Me.Columns("No&Name")
        End Sub
        
        Private Sub InitClass()
            Me.columnAddedDiscount = New DataColumn("AddedDiscount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAddedDiscount)
            Me.columnCompanyNo = New DataColumn("CompanyNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCompanyNo)
            Me.columnContractorNo = New DataColumn("ContractorNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnContractorNo)
            Me.columnDesign = New DataColumn("Design", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDesign)
            Me.columnDiscount = New DataColumn("Discount", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDiscount)
            Me.columnJobName = New DataColumn("JobName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnJobName)
            Me.columnJobNo = New DataColumn("JobNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnJobNo)
            Me.columnOrderNo = New DataColumn("OrderNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOrderNo)
            Me.columnTons_Or_Kilograms = New DataColumn("Tons Or Kilograms", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTons_Or_Kilograms)
            Me.columnUnitOfMeas = New DataColumn("UnitOfMeas", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUnitOfMeas)
            Me.column_No_Name = New DataColumn("No&Name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column_No_Name)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnJobNo}, true))
            Me.columnJobNo.AllowDBNull = false
            Me.columnJobNo.Unique = true
            Me.column_No_Name.ReadOnly = true
        End Sub
        
        Public Function NewJobRow() As JobRow
            Return CType(Me.NewRow,JobRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New JobRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(JobRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.JobRowChangedEvent) Is Nothing) Then
                RaiseEvent JobRowChanged(Me, New JobRowChangeEvent(CType(e.Row,JobRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.JobRowChangingEvent) Is Nothing) Then
                RaiseEvent JobRowChanging(Me, New JobRowChangeEvent(CType(e.Row,JobRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.JobRowDeletedEvent) Is Nothing) Then
                RaiseEvent JobRowDeleted(Me, New JobRowChangeEvent(CType(e.Row,JobRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.JobRowDeletingEvent) Is Nothing) Then
                RaiseEvent JobRowDeleting(Me, New JobRowChangeEvent(CType(e.Row,JobRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveJobRow(ByVal row As JobRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class JobRow
        Inherits DataRow
        
        Private tableJob As JobDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableJob = CType(Me.Table,JobDataTable)
        End Sub
        
        Public Property AddedDiscount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableJob.AddedDiscountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableJob.AddedDiscountColumn) = value
            End Set
        End Property
        
        Public Property CompanyNo As String
            Get
                Try 
                    Return CType(Me(Me.tableJob.CompanyNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableJob.CompanyNoColumn) = value
            End Set
        End Property
        
        Public Property ContractorNo As String
            Get
                Try 
                    Return CType(Me(Me.tableJob.ContractorNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableJob.ContractorNoColumn) = value
            End Set
        End Property
        
        Public Property Design As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableJob.DesignColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableJob.DesignColumn) = value
            End Set
        End Property
        
        Public Property Discount As Integer
            Get
                Try 
                    Return CType(Me(Me.tableJob.DiscountColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableJob.DiscountColumn) = value
            End Set
        End Property
        
        Public Property JobName As String
            Get
                Try 
                    Return CType(Me(Me.tableJob.JobNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableJob.JobNameColumn) = value
            End Set
        End Property
        
        Public Property JobNo As String
            Get
                Return CType(Me(Me.tableJob.JobNoColumn),String)
            End Get
            Set
                Me(Me.tableJob.JobNoColumn) = value
            End Set
        End Property
        
        Public Property OrderNo As String
            Get
                Try 
                    Return CType(Me(Me.tableJob.OrderNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableJob.OrderNoColumn) = value
            End Set
        End Property
        
        Public Property Tons_Or_Kilograms As String
            Get
                Try 
                    Return CType(Me(Me.tableJob.Tons_Or_KilogramsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableJob.Tons_Or_KilogramsColumn) = value
            End Set
        End Property
        
        Public Property UnitOfMeas As String
            Get
                Try 
                    Return CType(Me(Me.tableJob.UnitOfMeasColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableJob.UnitOfMeasColumn) = value
            End Set
        End Property
        
        Public Property _No_Name As String
            Get
                Try 
                    Return CType(Me(Me.tableJob._No_NameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableJob._No_NameColumn) = value
            End Set
        End Property
        
        Public Function IsAddedDiscountNull() As Boolean
            Return Me.IsNull(Me.tableJob.AddedDiscountColumn)
        End Function
        
        Public Sub SetAddedDiscountNull()
            Me(Me.tableJob.AddedDiscountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCompanyNoNull() As Boolean
            Return Me.IsNull(Me.tableJob.CompanyNoColumn)
        End Function
        
        Public Sub SetCompanyNoNull()
            Me(Me.tableJob.CompanyNoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsContractorNoNull() As Boolean
            Return Me.IsNull(Me.tableJob.ContractorNoColumn)
        End Function
        
        Public Sub SetContractorNoNull()
            Me(Me.tableJob.ContractorNoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDesignNull() As Boolean
            Return Me.IsNull(Me.tableJob.DesignColumn)
        End Function
        
        Public Sub SetDesignNull()
            Me(Me.tableJob.DesignColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDiscountNull() As Boolean
            Return Me.IsNull(Me.tableJob.DiscountColumn)
        End Function
        
        Public Sub SetDiscountNull()
            Me(Me.tableJob.DiscountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsJobNameNull() As Boolean
            Return Me.IsNull(Me.tableJob.JobNameColumn)
        End Function
        
        Public Sub SetJobNameNull()
            Me(Me.tableJob.JobNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOrderNoNull() As Boolean
            Return Me.IsNull(Me.tableJob.OrderNoColumn)
        End Function
        
        Public Sub SetOrderNoNull()
            Me(Me.tableJob.OrderNoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTons_Or_KilogramsNull() As Boolean
            Return Me.IsNull(Me.tableJob.Tons_Or_KilogramsColumn)
        End Function
        
        Public Sub SetTons_Or_KilogramsNull()
            Me(Me.tableJob.Tons_Or_KilogramsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUnitOfMeasNull() As Boolean
            Return Me.IsNull(Me.tableJob.UnitOfMeasColumn)
        End Function
        
        Public Sub SetUnitOfMeasNull()
            Me(Me.tableJob.UnitOfMeasColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Is_No_NameNull() As Boolean
            Return Me.IsNull(Me.tableJob._No_NameColumn)
        End Function
        
        Public Sub Set_No_NameNull()
            Me(Me.tableJob._No_NameColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class JobRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As JobRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As JobRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As JobRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SchedItemDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCutSheetNo As DataColumn
        
        Private columnScheduleNo As DataColumn
        
        Friend Sub New()
            MyBase.New("SchedItem")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CutSheetNoColumn As DataColumn
            Get
                Return Me.columnCutSheetNo
            End Get
        End Property
        
        Friend ReadOnly Property ScheduleNoColumn As DataColumn
            Get
                Return Me.columnScheduleNo
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SchedItemRow
            Get
                Return CType(Me.Rows(index),SchedItemRow)
            End Get
        End Property
        
        Public Event SchedItemRowChanged As SchedItemRowChangeEventHandler
        
        Public Event SchedItemRowChanging As SchedItemRowChangeEventHandler
        
        Public Event SchedItemRowDeleted As SchedItemRowChangeEventHandler
        
        Public Event SchedItemRowDeleting As SchedItemRowChangeEventHandler
        
        Public Overloads Sub AddSchedItemRow(ByVal row As SchedItemRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSchedItemRow(ByVal CutSheetNo As Integer, ByVal ScheduleNo As String) As SchedItemRow
            Dim rowSchedItemRow As SchedItemRow = CType(Me.NewRow,SchedItemRow)
            rowSchedItemRow.ItemArray = New Object() {CutSheetNo, ScheduleNo}
            Me.Rows.Add(rowSchedItemRow)
            Return rowSchedItemRow
        End Function
        
        Public Function FindByCutSheetNoScheduleNo(ByVal CutSheetNo As Integer, ByVal ScheduleNo As String) As SchedItemRow
            Return CType(Me.Rows.Find(New Object() {CutSheetNo, ScheduleNo}),SchedItemRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SchedItemDataTable = CType(MyBase.Clone,SchedItemDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SchedItemDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCutSheetNo = Me.Columns("CutSheetNo")
            Me.columnScheduleNo = Me.Columns("ScheduleNo")
        End Sub
        
        Private Sub InitClass()
            Me.columnCutSheetNo = New DataColumn("CutSheetNo", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCutSheetNo)
            Me.columnScheduleNo = New DataColumn("ScheduleNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnScheduleNo)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnCutSheetNo, Me.columnScheduleNo}, true))
            Me.columnCutSheetNo.AllowDBNull = false
            Me.columnScheduleNo.AllowDBNull = false
        End Sub
        
        Public Function NewSchedItemRow() As SchedItemRow
            Return CType(Me.NewRow,SchedItemRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SchedItemRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SchedItemRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SchedItemRowChangedEvent) Is Nothing) Then
                RaiseEvent SchedItemRowChanged(Me, New SchedItemRowChangeEvent(CType(e.Row,SchedItemRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SchedItemRowChangingEvent) Is Nothing) Then
                RaiseEvent SchedItemRowChanging(Me, New SchedItemRowChangeEvent(CType(e.Row,SchedItemRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SchedItemRowDeletedEvent) Is Nothing) Then
                RaiseEvent SchedItemRowDeleted(Me, New SchedItemRowChangeEvent(CType(e.Row,SchedItemRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SchedItemRowDeletingEvent) Is Nothing) Then
                RaiseEvent SchedItemRowDeleting(Me, New SchedItemRowChangeEvent(CType(e.Row,SchedItemRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSchedItemRow(ByVal row As SchedItemRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SchedItemRow
        Inherits DataRow
        
        Private tableSchedItem As SchedItemDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSchedItem = CType(Me.Table,SchedItemDataTable)
        End Sub
        
        Public Property CutSheetNo As Integer
            Get
                Return CType(Me(Me.tableSchedItem.CutSheetNoColumn),Integer)
            End Get
            Set
                Me(Me.tableSchedItem.CutSheetNoColumn) = value
            End Set
        End Property
        
        Public Property ScheduleNo As String
            Get
                Return CType(Me(Me.tableSchedItem.ScheduleNoColumn),String)
            End Get
            Set
                Me(Me.tableSchedItem.ScheduleNoColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SchedItemRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SchedItemRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SchedItemRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SchedItemRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CutItemDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCutSheetNo As DataColumn
        
        Private column_Item As DataColumn
        
        Private columnLength As DataColumn
        
        Private columnQty As DataColumn
        
        Private columnScheduleNo As DataColumn
        
        Private columnTypeCode As DataColumn
        
        Friend Sub New()
            MyBase.New("CutItem")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CutSheetNoColumn As DataColumn
            Get
                Return Me.columnCutSheetNo
            End Get
        End Property
        
        Friend ReadOnly Property _ItemColumn As DataColumn
            Get
                Return Me.column_Item
            End Get
        End Property
        
        Friend ReadOnly Property LengthColumn As DataColumn
            Get
                Return Me.columnLength
            End Get
        End Property
        
        Friend ReadOnly Property QtyColumn As DataColumn
            Get
                Return Me.columnQty
            End Get
        End Property
        
        Friend ReadOnly Property ScheduleNoColumn As DataColumn
            Get
                Return Me.columnScheduleNo
            End Get
        End Property
        
        Friend ReadOnly Property TypeCodeColumn As DataColumn
            Get
                Return Me.columnTypeCode
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CutItemRow
            Get
                Return CType(Me.Rows(index),CutItemRow)
            End Get
        End Property
        
        Public Event CutItemRowChanged As CutItemRowChangeEventHandler
        
        Public Event CutItemRowChanging As CutItemRowChangeEventHandler
        
        Public Event CutItemRowDeleted As CutItemRowChangeEventHandler
        
        Public Event CutItemRowDeleting As CutItemRowChangeEventHandler
        
        Public Overloads Sub AddCutItemRow(ByVal row As CutItemRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCutItemRow(ByVal CutSheetNo As Integer, ByVal _Item As Integer, ByVal Length As Double, ByVal Qty As Integer, ByVal ScheduleNo As String, ByVal TypeCode As String) As CutItemRow
            Dim rowCutItemRow As CutItemRow = CType(Me.NewRow,CutItemRow)
            rowCutItemRow.ItemArray = New Object() {CutSheetNo, _Item, Length, Qty, ScheduleNo, TypeCode}
            Me.Rows.Add(rowCutItemRow)
            Return rowCutItemRow
        End Function
        
        Public Function FindByCutSheetNo_ItemScheduleNo(ByVal CutSheetNo As Integer, ByVal _Item As Integer, ByVal ScheduleNo As String) As CutItemRow
            Return CType(Me.Rows.Find(New Object() {CutSheetNo, _Item, ScheduleNo}),CutItemRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CutItemDataTable = CType(MyBase.Clone,CutItemDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CutItemDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCutSheetNo = Me.Columns("CutSheetNo")
            Me.column_Item = Me.Columns("Item")
            Me.columnLength = Me.Columns("Length")
            Me.columnQty = Me.Columns("Qty")
            Me.columnScheduleNo = Me.Columns("ScheduleNo")
            Me.columnTypeCode = Me.Columns("TypeCode")
        End Sub
        
        Private Sub InitClass()
            Me.columnCutSheetNo = New DataColumn("CutSheetNo", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCutSheetNo)
            Me.column_Item = New DataColumn("Item", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column_Item)
            Me.columnLength = New DataColumn("Length", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLength)
            Me.columnQty = New DataColumn("Qty", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQty)
            Me.columnScheduleNo = New DataColumn("ScheduleNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnScheduleNo)
            Me.columnTypeCode = New DataColumn("TypeCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTypeCode)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnCutSheetNo, Me.column_Item, Me.columnScheduleNo}, true))
            Me.columnCutSheetNo.AllowDBNull = false
            Me.column_Item.AllowDBNull = false
            Me.columnScheduleNo.AllowDBNull = false
        End Sub
        
        Public Function NewCutItemRow() As CutItemRow
            Return CType(Me.NewRow,CutItemRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CutItemRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CutItemRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CutItemRowChangedEvent) Is Nothing) Then
                RaiseEvent CutItemRowChanged(Me, New CutItemRowChangeEvent(CType(e.Row,CutItemRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CutItemRowChangingEvent) Is Nothing) Then
                RaiseEvent CutItemRowChanging(Me, New CutItemRowChangeEvent(CType(e.Row,CutItemRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CutItemRowDeletedEvent) Is Nothing) Then
                RaiseEvent CutItemRowDeleted(Me, New CutItemRowChangeEvent(CType(e.Row,CutItemRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CutItemRowDeletingEvent) Is Nothing) Then
                RaiseEvent CutItemRowDeleting(Me, New CutItemRowChangeEvent(CType(e.Row,CutItemRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCutItemRow(ByVal row As CutItemRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CutItemRow
        Inherits DataRow
        
        Private tableCutItem As CutItemDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCutItem = CType(Me.Table,CutItemDataTable)
        End Sub
        
        Public Property CutSheetNo As Integer
            Get
                Return CType(Me(Me.tableCutItem.CutSheetNoColumn),Integer)
            End Get
            Set
                Me(Me.tableCutItem.CutSheetNoColumn) = value
            End Set
        End Property
        
        Public Property _Item As Integer
            Get
                Return CType(Me(Me.tableCutItem._ItemColumn),Integer)
            End Get
            Set
                Me(Me.tableCutItem._ItemColumn) = value
            End Set
        End Property
        
        Public Property Length As Double
            Get
                Try 
                    Return CType(Me(Me.tableCutItem.LengthColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCutItem.LengthColumn) = value
            End Set
        End Property
        
        Public Property Qty As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCutItem.QtyColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCutItem.QtyColumn) = value
            End Set
        End Property
        
        Public Property ScheduleNo As String
            Get
                Return CType(Me(Me.tableCutItem.ScheduleNoColumn),String)
            End Get
            Set
                Me(Me.tableCutItem.ScheduleNoColumn) = value
            End Set
        End Property
        
        Public Property TypeCode As String
            Get
                Try 
                    Return CType(Me(Me.tableCutItem.TypeCodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCutItem.TypeCodeColumn) = value
            End Set
        End Property
        
        Public Function IsLengthNull() As Boolean
            Return Me.IsNull(Me.tableCutItem.LengthColumn)
        End Function
        
        Public Sub SetLengthNull()
            Me(Me.tableCutItem.LengthColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsQtyNull() As Boolean
            Return Me.IsNull(Me.tableCutItem.QtyColumn)
        End Function
        
        Public Sub SetQtyNull()
            Me(Me.tableCutItem.QtyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTypeCodeNull() As Boolean
            Return Me.IsNull(Me.tableCutItem.TypeCodeColumn)
        End Function
        
        Public Sub SetTypeCodeNull()
            Me(Me.tableCutItem.TypeCodeColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CutItemRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CutItemRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CutItemRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CutItemRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
